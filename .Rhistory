plot_save_function(p, figures_folder, fileStr = 'State_of_Utah_census_nonicu2')
p
# former non-icu patient counts
p <- pac_plot_fcn2(pac_UT_nonicu,
titleText = 'Post-acute care census, former non-ICU patients',
subtitleText = 'State of Utah',
full_names = full_ct_names)
plot_save_function(p, figures_folder, fileStr = 'State_of_Utah_census_nonicu2')
p
# patient flows
# ************************************
#all patient flows
p <- pac_plot_fcn2(pac_UT_all_inflow,
titleText = 'Post-acute care flows per day, all patients',
subtitleText = 'State of Utah residents who require specialized PAC',
full_names = full_ct_names)
plot_save_function(p, figures_folder, fileStr = 'State_of_Utah_flows_all2')
p
library(dplyr)
library(rsvg)
#source folder with rds data
source_folder <- './/pac_figures'
#folder in which to save updated plots
output_folder <- './/pac_figures'
# Get filenames
full_loc <- list.files(pattern = ".*.svg", path = source_folder, full.names = T)
input_files <- list.files(pattern = ".*.svg", path = source_folder, full.names = F)
fileText <- substr(input_files,1,nchar(input_files)-4)
# convert svg to png
for(lId in seq_along(full_loc)){
bitmap <- rsvg(full_loc[lId])
png::writePNG(bitmap,paste0(output_folder,'//',fileText[lId],'.png'), dpi = 144)
}
library(dplyr)
library(rsvg)
#source folder with rds data
source_folder <- './/pac_figures'
#folder in which to save updated plots
output_folder <- './/pac_figures'
# Get filenames
full_loc <- list.files(pattern = ".*.svg", path = source_folder, full.names = T)
input_files <- list.files(pattern = ".*.svg", path = source_folder, full.names = F)
fileText <- substr(input_files,1,nchar(input_files)-4)
# convert svg to png
for(lId in seq_along(full_loc)){
bitmap <- rsvg(full_loc[lId])
png::writePNG(bitmap,paste0(output_folder,'//',fileText[lId],'.png'), dpi = 300)
}
View(pac_UT_all)
View(pac_UT_all)
getwd()
library(dplyr)
library(rsvg)
#source folder with rds data
source_folder <- './/input_data//model_demo_old'
#folder in which to save updated plots
output_folder <- './/input_data//model_demo'
# Get filenames
full_loc <- list.files(pattern = "*.hosp.parquet", path = source_folder, full.names = T)
full_loc
library(dplyr)
library(rsvg)
#source folder with rds data
source_folder <- './/input_data//model_demo'
# Get filenames
full_loc <- list.files(pattern = "*.hosp.parquet", path = source_folder, full.names = T)
file.rename(list.files(pattern="*.parquet"), gsub('death-','example_low_R0-',list.files(pattern="*.parquet")))
full_loc <- list.files(pattern = "*.hosp.parquet", path = source_folder, full.names = T)
full_loc
list.files(pattern="*.parquet")
file.rename(list.files(pattern="*.parquet",path = source_folder, full.names= T),
gsub('death-','example_low_R0-',
list.files(pattern="*.parquet")))
file.rename(list.files(pattern="*.parquet",path = source_folder, full.names= T),
gsub('death-','example_low_R0-',
list.files(pattern="*.parquet", path = source_folder, full.names= T)))
#Authors: Robert Checketts and Matt Maloney
#general information: this script calculates discharges and post-acute care outcomes for
# covid patients using  hospitalization results from an epidemiology model (specifically,
# the Johns Hopkins University Infectious Disease Dynamics (JHU IDD) model). See the repository
# readme formore information.
# Libraries ----
library(arrow) # for loading parquet files
library(dplyr) # for manipulating data
library(ggplot2) # for visualizations
library(gtools) # dirichlet distribution
library(data.table) # for manipulating data
#inputs -------------------------------------------------------------------------------------------
# folder location with hospitalization data
# designed for JHH model output as series of .parquet files
# designed for one policy scenario per folder, but each folder can include data for multiple
# IFR values
hospitalization_data_folder <- '.\\input_data\\model_demo'
# folders for storing results
results_folder <- '.\\pac_results_data'
# scenario name
ifr_type <- 'med' #this is used to pull from the subset of files from the hospitalization_data_folder, must be low, med, or high
scen_descript <- '_example_low_R0' #additional description of policy or scenario to add to output file names
scen_name <- paste0(ifr_type,'_IFR',scen_descript)
# priors for fraction of patients who require specialized post-acute care
priors_mean_icu <- c('none' = 0.488,'hh' = 0.20,'snf' = 0.30,'hos' = 0.012)
priors_mean_nonicu <- c('none' = 0.748,'hh' = 0.18,'snf' = 0.06,'hos' = 0.012)
# post-acute care length-of-stay parameters (days)
los_icu <- c('none' = 0,'hh' = 15,'snf' = 18,'hos' = 7)
los_nonicu <- c('none' = 0,'hh' = 15,'snf' = 18,'hos' = 7)
# weight to put on post-acute care fraction priors
prior_wt_icu <- 138
prior_wt_nonicu <- 121
# observed discharges within region/health system (used to update priors)
observed_icu <-  c('none' = 17,'hh' = 3,'snf' = 3,'hos' = 1)
observed_nonicu <-  c('none' = 45,'hh' = 4,'snf' = 3,'hos' = 2)
# Run post-acute care simulations-------------------------------------------------------------------
# load post-acute care functions
source('.//pac_functions.R')
# Get hospitalization data filenames
full_loc <- list.files(pattern = paste0(ifr_type,".*.parquet"),
path = hospitalization_data_folder, full.names = T)
# Run Function to load hospital discharge data
discharge_data <- lapply(X = full_loc, get_discharges)
discharge_data <- rbindlist(discharge_data)
# get parameters for posterior dirichlet distribution
alphas_icu <- get_updated_alphas(prior_wt = prior_wt_icu,
prior_means = priors_mean_icu,
observations = observed_icu)
alphas_nonicu <- get_updated_alphas(prior_wt = prior_wt_nonicu,
prior_means = priors_mean_nonicu,
observations = observed_nonicu)
# create 4-dimensional arrays to store output
sim_ids <- sort(unique(as.numeric(discharge_data$sim_num)))
time_ids <- sort(unique(discharge_data$time))
county_ids <- unique(discharge_data$geoid)
simArr_icu <- array(
data = rep(0,length(county_ids)*length(sim_ids)*length(length(time_ids))*length(priors_mean_icu)),
dim = c(length(county_ids),length(sim_ids),length(time_ids),length(priors_mean_icu)),
dimnames = list(county_ids,sim_ids,as.character(time_ids),names(priors_mean_icu))
)
simArr_nonicu <- array(
data = rep(0,length(county_ids)*length(sim_ids)*length(length(time_ids))*length(priors_mean_nonicu)),
dim = c(length(county_ids),length(sim_ids),length(time_ids),length(priors_mean_nonicu)),
dimnames = list(county_ids,sim_ids,as.character(time_ids),names(priors_mean_nonicu))
)
simArr_icu_inflow <- simArr_icu
simArr_nonicu_inflow <- simArr_nonicu
#sort discharge data (REQUIRED)
discharge_data <- discharge_data %>% arrange(time,sim_num,geoid)
dischargeArr_icu <-  array(
data = discharge_data$icu_discharge,
dim = c(length(county_ids),length(sim_ids),length(time_ids)),
dimnames = list(county_ids,sim_ids,as.character(time_ids))
)
dischargeArr_nonicu <-  array(
data = discharge_data$non_icu_discharge,
dim = c(length(county_ids),length(sim_ids),length(time_ids)),
dimnames = list(county_ids,sim_ids,as.character(time_ids))
)
# run simulations for icu discharges
counter <- 0
for(s in sim_ids){
for(cntyId in county_ids){
counter <- counter + 1
if (counter %% 1000 == 0){
print(paste0("Icu discharges ",
round(counter / (length(sim_ids) * length(county_ids)), 4) * 100,
"% complete"))
}
sim <- simulate_post_acute(dischargeArr_icu[cntyId,s,],
alphas = alphas_icu,
losAssumps = los_icu,
stochastic = TRUE)
simArr_icu[cntyId,s,,] <- sim[['census']]
simArr_icu_inflow[cntyId,s,,] <- sim[['inflow']]
}
}
# run simulations for non-icu discharges
counter <- 0
for(s in sim_ids){
for(cntyId in county_ids){
counter <- counter + 1
if (counter %% 1000 == 0){
print(paste0("Non-icu discharges ",
round(counter / (length(sim_ids) * length(county_ids)), 4) * 100,
"% complete"))
}
sim <- simulate_post_acute(dischargeArr_nonicu[cntyId,s,],
alphas = alphas_nonicu,
losAssumps = los_nonicu,
stochastic = TRUE)
simArr_nonicu[cntyId,s,,] <- sim[['census']]
simArr_nonicu_inflow[cntyId,s,,] <- sim[['inflow']]
}
}
rm(s,cntyId)
# save raw pac ouput data
saveRDS(
simArr_icu,
paste(results_folder,paste0(scen_name,'_','pac_results_icu.rds'),sep ='\\')
)
saveRDS(
simArr_nonicu,
paste(results_folder,paste0(scen_name,'_','pac_results_nonicu.rds'),sep ='\\')
)
saveRDS(
simArr_icu_inflow,
paste(results_folder,paste0(scen_name,'_','pac_results_icu_inflow.rds'),sep ='\\')
)
saveRDS(
simArr_nonicu_inflow,
paste(results_folder,paste0(scen_name,'_','pac_results_nonicu_inflow.rds'),sep ='\\')
)
#Authors: Robert Checketts and Matt Maloney
#general information: this script calculates discharges and post-acute care outcomes for
# covid patients using  hospitalization results from an epidemiology model (specifically,
# the Johns Hopkins University Infectious Disease Dynamics (JHU IDD) model). See the repository
# readme formore information.
# Libraries ----
library(arrow) # for loading parquet files
library(dplyr) # for manipulating data
library(ggplot2) # for visualizations
library(gtools) # dirichlet distribution
library(data.table) # for manipulating data
#inputs -------------------------------------------------------------------------------------------
# folder location with hospitalization data
# designed for JHH model output as series of .parquet files
# designed for one policy scenario per folder, but each folder can include data for multiple
# IFR values
hospitalization_data_folder <- '.\\input_data\\example_low_R0'
# folders for storing results
results_folder <- '.\\pac_results_data'
# scenario name
ifr_type <- 'med' #this is used to pull from the subset of files from the hospitalization_data_folder, must be low, med, or high
scen_descript <- '_example_low_R0' #additional description of policy or scenario to add to output file names
scen_name <- paste0(ifr_type,'_IFR',scen_descript)
# priors for fraction of patients who require specialized post-acute care
priors_mean_icu <- c('none' = 0.488,'hh' = 0.20,'snf' = 0.30,'hos' = 0.012)
priors_mean_nonicu <- c('none' = 0.748,'hh' = 0.18,'snf' = 0.06,'hos' = 0.012)
# post-acute care length-of-stay parameters (days)
los_icu <- c('none' = 0,'hh' = 15,'snf' = 18,'hos' = 7)
los_nonicu <- c('none' = 0,'hh' = 15,'snf' = 18,'hos' = 7)
# weight to put on post-acute care fraction priors
prior_wt_icu <- 138
prior_wt_nonicu <- 121
# observed discharges within region/health system (used to update priors)
observed_icu <-  c('none' = 17,'hh' = 3,'snf' = 3,'hos' = 1)
observed_nonicu <-  c('none' = 45,'hh' = 4,'snf' = 3,'hos' = 2)
# Run post-acute care simulations-------------------------------------------------------------------
# load post-acute care functions
source('.//pac_functions.R')
# Get hospitalization data filenames
full_loc <- list.files(pattern = paste0(ifr_type,".*.parquet"),
path = hospitalization_data_folder, full.names = T)
# Run Function to load hospital discharge data
discharge_data <- lapply(X = full_loc, get_discharges)
discharge_data <- rbindlist(discharge_data)
# get parameters for posterior dirichlet distribution
alphas_icu <- get_updated_alphas(prior_wt = prior_wt_icu,
prior_means = priors_mean_icu,
observations = observed_icu)
alphas_nonicu <- get_updated_alphas(prior_wt = prior_wt_nonicu,
prior_means = priors_mean_nonicu,
observations = observed_nonicu)
# create 4-dimensional arrays to store output
sim_ids <- sort(unique(as.numeric(discharge_data$sim_num)))
time_ids <- sort(unique(discharge_data$time))
county_ids <- unique(discharge_data$geoid)
simArr_icu <- array(
data = rep(0,length(county_ids)*length(sim_ids)*length(length(time_ids))*length(priors_mean_icu)),
dim = c(length(county_ids),length(sim_ids),length(time_ids),length(priors_mean_icu)),
dimnames = list(county_ids,sim_ids,as.character(time_ids),names(priors_mean_icu))
)
simArr_nonicu <- array(
data = rep(0,length(county_ids)*length(sim_ids)*length(length(time_ids))*length(priors_mean_nonicu)),
dim = c(length(county_ids),length(sim_ids),length(time_ids),length(priors_mean_nonicu)),
dimnames = list(county_ids,sim_ids,as.character(time_ids),names(priors_mean_nonicu))
)
simArr_icu_inflow <- simArr_icu
simArr_nonicu_inflow <- simArr_nonicu
#sort discharge data (REQUIRED)
discharge_data <- discharge_data %>% arrange(time,sim_num,geoid)
dischargeArr_icu <-  array(
data = discharge_data$icu_discharge,
dim = c(length(county_ids),length(sim_ids),length(time_ids)),
dimnames = list(county_ids,sim_ids,as.character(time_ids))
)
dischargeArr_nonicu <-  array(
data = discharge_data$non_icu_discharge,
dim = c(length(county_ids),length(sim_ids),length(time_ids)),
dimnames = list(county_ids,sim_ids,as.character(time_ids))
)
# run simulations for icu discharges
counter <- 0
for(s in sim_ids){
for(cntyId in county_ids){
counter <- counter + 1
if (counter %% 1000 == 0){
print(paste0("Icu discharges ",
round(counter / (length(sim_ids) * length(county_ids)), 4) * 100,
"% complete"))
}
sim <- simulate_post_acute(dischargeArr_icu[cntyId,s,],
alphas = alphas_icu,
losAssumps = los_icu,
stochastic = TRUE)
simArr_icu[cntyId,s,,] <- sim[['census']]
simArr_icu_inflow[cntyId,s,,] <- sim[['inflow']]
}
}
# run simulations for non-icu discharges
counter <- 0
for(s in sim_ids){
for(cntyId in county_ids){
counter <- counter + 1
if (counter %% 1000 == 0){
print(paste0("Non-icu discharges ",
round(counter / (length(sim_ids) * length(county_ids)), 4) * 100,
"% complete"))
}
sim <- simulate_post_acute(dischargeArr_nonicu[cntyId,s,],
alphas = alphas_nonicu,
losAssumps = los_nonicu,
stochastic = TRUE)
simArr_nonicu[cntyId,s,,] <- sim[['census']]
simArr_nonicu_inflow[cntyId,s,,] <- sim[['inflow']]
}
}
rm(s,cntyId)
# save raw pac ouput data
saveRDS(
simArr_icu,
paste(results_folder,paste0(scen_name,'_','pac_results_icu.rds'),sep ='\\')
)
saveRDS(
simArr_nonicu,
paste(results_folder,paste0(scen_name,'_','pac_results_nonicu.rds'),sep ='\\')
)
saveRDS(
simArr_icu_inflow,
paste(results_folder,paste0(scen_name,'_','pac_results_icu_inflow.rds'),sep ='\\')
)
saveRDS(
simArr_nonicu_inflow,
paste(results_folder,paste0(scen_name,'_','pac_results_nonicu_inflow.rds'),sep ='\\')
)
library(dplyr) # for manipulating data
library(ggplot2) # for visualizations
# folders
pac_data_folder <- './/pac_results_data'
figures_folder <- './/pac_figures'
# scenario name
ifr_type <- 'med'
scen_descript <- '_example_low_R0'
scen_name <- paste0(ifr_type,'_IFR',scen_descript)
# full names for post-acute care services
full_ct_names <- c('none' = 'Direct to home',
'hh' = 'Home health',
'snf' = 'SNF',
'hos' = 'Hospice')
#import data and functions
simArr_icu <- readRDS(paste0(pac_data_folder,'//', scen_name, '_pac_results_icu.rds'))
simArr_nonicu <- readRDS(paste0(pac_data_folder,'//', scen_name, '_pac_results_nonicu.rds'))
simArr_icu_inflow <- readRDS(paste0(pac_data_folder,'//', scen_name, '_pac_results_icu_inflow.rds'))
simArr_nonicu_inflow <- readRDS(paste0(pac_data_folder,'//', scen_name, '_pac_results_nonicu_inflow.rds'))
source('.//pac_functions.R')
# calculate simulation summary stats----------------------------------------------------------------
# get State geoids
run_geoids <- dimnames(simArr_icu)[[1]]
state_geoids <- run_geoids[grepl(pattern = "^49", x = run_geoids)]
# summarize pac patient counts/census
# ************************************
# calculate summary stats for for former icu patient pac (counts)
pac_state_icu <- summarize_pac_sims(sim_results = simArr_icu,
geoids = state_geoids,
multiplier = rep(1,length(state_geoids)))
# calculate summary stats for former non-icu patients (counts)
pac_state_nonicu <- summarize_pac_sims(sim_results = simArr_nonicu,
geoids = state_geoids,
multiplier = rep(1,length(state_geoids)))
# calculate summary stats for all former hospitalized patients (counts)
pac_state_all <- summarize_pac_sims(sim_results = simArr_nonicu+simArr_icu,
geoids = state_geoids,
multiplier = rep(1,length(state_geoids)))
# summarize flows to pac
# ************************************
# calculate summary stats for all former hospitalized patients (flows)
pac_state_all_inflow <- summarize_pac_sims(simArr_nonicu_inflow+simArr_icu_inflow,
geoids = state_geoids,
multiplier = rep(1,length(state_geoids)))
# create figures -------------------------------------------------------------------
# a few figure examples
# patient counts
# ************************************
#all patient counts (consolidated into single plot using pac_plot_fcn)
p <- pac_plot_fcn(pac_state_all,
titleText = 'Post-acute care census',
subtitleText = 'Example state',
full_names = full_ct_names)
plot_save_function(p, figures_folder, fileStr = 'example_state_census')
p
#all patient counts (as separate plots in a row using pac_plot_fcn2)
p <- pac_plot_fcn2(pac_state_all,
titleText = 'Post-acute care census',
subtitleText = 'Example state',
full_names = full_ct_names)
plot_save_function(p, figures_folder, fileStr = 'example_state_census2', width = 8)
p
# former icu patient counts
p <- pac_plot_fcn2(pac_state_icu,
titleText = 'Post-acute care census, former ICU patients',
subtitleText = 'Example state',
full_names = full_ct_names)
plot_save_function(p, figures_folder, fileStr = 'example_state_census_icu2')
p
# former non-icu patient counts
p <- pac_plot_fcn2(pac_state_nonicu,
titleText = 'Post-acute care census, former non-ICU patients',
subtitleText = 'Example state',
full_names = full_ct_names)
plot_save_function(p, figures_folder, fileStr = 'example_state_census_nonicu2')
p
# patient flows
# ************************************
#all patient flows
p <- pac_plot_fcn2(pac_state_all_inflow,
titleText = 'Post-acute care flows per day, all patients',
subtitleText = 'Example state residents who require specialized PAC',
full_names = full_ct_names)
plot_save_function(p, figures_folder, fileStr = 'example_state_flows_all2')
p
library(dplyr) # for manipulating data
library(ggplot2) # for visualizations
# folders
pac_data_folder <- './/pac_results_data'
figures_folder <- './/pac_figures'
# scenario name
ifr_type <- 'med'
scen_descript <- '_example_low_R0'
scen_name <- paste0(ifr_type,'_IFR',scen_descript)
# full names for post-acute care services
full_ct_names <- c('none' = 'Direct to home',
'hh' = 'Home health',
'snf' = 'SNF',
'hos' = 'Hospice')
# provide geoids and corresponding market share estimates
hs_geoids <- c('49043','49035','49049')
hs_market_share <- c(0.7,0.5,0.2)
#import data and functions
simArr_icu <- readRDS(paste0(pac_data_folder,'//', scen_name, '_pac_results_icu.rds'))
simArr_nonicu <- readRDS(paste0(pac_data_folder,'//', scen_name, '_pac_results_nonicu.rds'))
simArr_icu_inflow <- readRDS(paste0(pac_data_folder,'//', scen_name, '_pac_results_icu_inflow.rds'))
simArr_nonicu_inflow <- readRDS(paste0(pac_data_folder,'//', scen_name, '_pac_results_nonicu_inflow.rds'))
source('.//pac_functions.R')
# calculate simulation summary stats----------------------------------------------------------------
# summarize pac patient counts/census
# ************************************
# calculate summary stats for for former icu patient pac (counts)
pac_HS_icu <- summarize_pac_sims(sim_results = simArr_icu,
geoids = hs_geoids,
multiplier = hs_market_share)
# calculate summary stats for former non-icu patients (counts)
pac_HS_nonicu <- summarize_pac_sims(sim_results = simArr_nonicu,
geoids = hs_geoids,
multiplier = hs_market_share)
# calculate summary stats for all former hospitalized patients (counts)
pac_HS_all <- summarize_pac_sims(sim_results = simArr_nonicu+simArr_icu,
geoids = hs_geoids,
multiplier = hs_market_share)
# summarize flows to pac
# ************************************
# calculate summary stats for all former hospitalized patients (flows)
pac_HS_all_inflow <- summarize_pac_sims(simArr_nonicu_inflow+simArr_icu_inflow,
geoids = hs_geoids,
multiplier = hs_market_share)
# create figures -------------------------------------------------------------------
# a few figure examples
# patient counts
# ************************************
#all patient counts (consolidated into single plot using pac_plot_fcn)
p <- pac_plot_fcn(pac_HS_all,
titleText = 'Post-acute care census',
subtitleText = 'Former Health System X Hospitalizations',
full_names = full_ct_names)
plot_save_function(p, figures_folder, fileStr = 'Health_System_X_census')
p
#all patient counts (as separate plots in a row using pac_plot_fcn2)
p <- pac_plot_fcn2(pac_HS_all,
titleText = 'Post-acute care census',
subtitleText = 'Former Health System X Hospitalizations',
full_names = full_ct_names)
plot_save_function(p, figures_folder, fileStr = 'Health_System_X_census2', width = 8)
p
# former icu patient counts
p <- pac_plot_fcn2(pac_HS_icu,
titleText = 'Post-acute care census, former ICU patients',
subtitleText = 'Health System X',
full_names = full_ct_names)
plot_save_function(p, figures_folder, fileStr = 'Health_System_X_census_nonicu2')
p
# former non-icu patient counts
p <- pac_plot_fcn2(pac_HS_nonicu,
titleText = 'Post-acute care census, former non-ICU patients',
subtitleText = 'Health System X',
full_names = full_ct_names)
plot_save_function(p, figures_folder, fileStr = 'Health_System_X_census_nonicu2')
p
# patient flows
# ************************************
#all patient flows
p <- pac_plot_fcn2(pac_HS_all_inflow,
titleText = 'Post-acute care flows per day, all patients',
subtitleText = 'Health System X',
full_names = full_ct_names)
plot_save_function(p, figures_folder, fileStr = 'Health_System_X_flows_all2')
p
